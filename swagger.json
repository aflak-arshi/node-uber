{
  "swagger": "2.0",
  "info": {
    "description": "This is sample node js swagger api.",
    "version": "1.0.0",
    "title": "Swagger Uber"
  },
  "contact": {
    "email": "aflakarshi@gmail.com"
  },
  "host": "localhost:3900",
  "basePath": "/api/v1",
  "schemes": ["http", "https"],
  "paths": {
    "/users": {
      "post": {
        "tags": ["User"],
        "summary": "Add a new user",
        "description": "",
        "operationId": "addUser",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": ["User"],
        "summary": "Returns user",
        "description": "Get all users",
        "operationId": "getUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login a user",
        "description": "",
        "operationId": "loginUser",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Find user by ID",
        "description": "Retrieves a single User.",
        "operationId": "getUserId",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID user"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": ["User"],
        "summary": "Modify user by ID",
        "description": "Modifies an existing User",
        "operationId": "updateUserId",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details of the user to modify. Required fields must be passed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID user"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
				"summary": "Delete a user",
				"description": "Deletes a user",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id value of the user to delete",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation."
          },
          "400": {
            "description": "Invalid ID user"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
			}
    },
    "/cabs": {
      "post": {
        "tags": ["Cab"],
        "summary": "Create a cab",
        "description": "",
        "operationId": "createCab",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Cab object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cab"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "tags": ["Cab"],
        "summary": "Returns cabs",
        "description": "Returns a cab",
        "operationId": "getCab",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/cabs/{id}": {
      "get": {
        "tags": ["Cab"],
        "summary": "Find cab by ID",
        "description": "Retrieves a single Cab",
        "operationId": "getCabId",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cab"
            }
          },
          "400": {
            "description": "Invalid ID cab"
          },
          "404": {
            "description": "Cab not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": ["Cab"],
        "summary": "Modify cab by ID",
        "description": "Modifies an existing Cab",
        "operationId": "updateCabId",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of cab that needs to be fetched",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details of the cab to modify. Required fields must be passed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cab"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cab"
            }
          },
          "400": {
            "description": "Invalid ID cab"
          },
          "404": {
            "description": "Cab not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
				"summary": "Delete a cab",
				"description": "Deletes a cab",
				"tags": [
					"Cab"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id value of the cab to delete",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation."
          },
          "400": {
            "description": "Invalid ID cab"
          },
          "404": {
            "description": "Cab not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
			}
    },
    "/history": {
      "get": {
        "tags": ["Cab History"],
        "summary": "Get all user cab history",
        "description": "Retrieves all user cab history.",
        "operationId": "getHistory",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/History"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/history/{id}": {
      "get": {
        "tags": ["Cab History"],
        "summary": "Find user cab history by ID",
        "description": "Retrieves a single user cab history",
        "operationId": "getCabId",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user cab history that needs to be fetched",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "400": {
            "description": "Invalid ID cab"
          },
          "404": {
            "description": "Cab not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "parameters": {
    "Filter": {
      "name": "filter[column]",
      "in": "query",
      "description": "Specifies filter criteria for limiting the results returned. Format is filter[column]=value where field is one of the fields in the object. Another possible format is filter[type][column]=value where type can be like, gt, lt, gte, lte, not.",
      "required": false,
      "type": "string"
    },
    "FilterType": {
      "name": "filter[type][column]",
      "in": "query",
      "description": "Specifies filter criteria for limiting the results returned. Format is filter[type][column]=value where type can be like, gt, lt, gte, lte, not and column is the name of the column to filter on.",
      "required": false,
      "type": "string"
    },
    "FilterId": {
      "name": "filter[column]",
      "in": "query",
      "description": "Specifies filter criteria for limiting the results returned. Only relationships can be filtered for this route. Format is filter[relationship.column]=value where relationship is a relation defined in 'include' parameter and column is a column on the relation. Another possible format is filter[type][column]=value where type can be like, gt, lt, gte, lte, not.",
      "required": false,
      "type": "string"
    },
    "FilterTypeId": {
      "name": "filter[type][column]",
      "in": "query",
      "description": "Specifies filter criteria for limiting the results returned. Only relationships can be filtered for this route. Specifies filter criteria for limiting the results returned. Format is filter[type][column]=value where type can be like, gt, lt, gte, lte, not and relationship is a relation defined in 'include' parameter and column is a column on the relation. Another possible format is filter[type][column]=value where type can be like, gt, lt, gte, lte, not.",
      "required": false,
      "type": "string"
    },
    "Fields": {
      "name": "fields",
      "in": "query",
      "description": "Specifies which columns in the table to retrieve. Format is fields[table]=columns where table is the name of the table for the query, and columns is a comma separated list of the columns to retrieve. To specify columns to be retrieved on a relationship, table should be the name of the relationship as described in the 'include' parameter.",
      "required": false,
      "type": "string"
    },
    "Sort": {
      "name": "sort",
      "in": "query",
      "description": "Field in object to sort results by in ascending order. Prepend a dash to sort results in a descending order. Sorting can also be performed by using dot notation (eg. sort=owner.firstName)",
      "required": false,
      "type": "string"
    },
    "PageLimit": {
      "name": "page[limit]",
      "in": "query",
      "description": "Maximum number of entries to be returned in a single query. Use page[offset] parameter to specify a starting point, default is 0.",
      "required": false,
      "type": "integer"
    },
    "PageOffset": {
      "name": "page[offset]",
      "in": "query",
      "description": "Starting offset to return multipaged values from.",
      "required": false,
      "type": "integer"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "accountStatus": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Cab": {
      "type": "object",
      "properties": {
        "cabName": {
          "type": "string"
        },
        "cabType": {
          "type": "string"
        },
        "cabModel": {
          "type": "string"
        },
        "cabLat": {
          "type": "string"
        },
        "canLon": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "area": {
          "type": "string"
        },
        "status": {
          "type": "boolean"
        },
        "driverId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Cab"
      }
    },
    "History": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "cabId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "History"
      }
    }
  }
}
